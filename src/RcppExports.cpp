// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "sparr_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// marginalize_
Rcpp::List marginalize_(arma::Mat<short>& x, std::vector<double>& xval, std::vector<std::string> xvar, std::vector<std::string> y);
RcppExport SEXP _sparr_marginalize_(SEXP xSEXP, SEXP xvalSEXP, SEXP xvarSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<short>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type xval(xvalSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type xvar(xvarSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(marginalize_(x, xval, xvar, y));
    return rcpp_result_gen;
END_RCPP
}
// merge_disjoint_
Rcpp::List merge_disjoint_(arma::Mat<short>& x, arma::Mat<short>& y, std::vector<double>& xval, std::vector<double>& yval, std::vector<std::string> xvar, std::vector<std::string> yvar);
RcppExport SEXP _sparr_merge_disjoint_(SEXP xSEXP, SEXP ySEXP, SEXP xvalSEXP, SEXP yvalSEXP, SEXP xvarSEXP, SEXP yvarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<short>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::Mat<short>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type xval(xvalSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type yval(yvalSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type xvar(xvarSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type yvar(yvarSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_disjoint_(x, y, xval, yval, xvar, yvar));
    return rcpp_result_gen;
END_RCPP
}
// merge_
Rcpp::List merge_(arma::Mat<short>& x, arma::Mat<short>& y, std::vector<double>& xval, std::vector<double>& yval, std::vector<std::string> xvar, std::vector<std::string> yvar, std::string op);
RcppExport SEXP _sparr_merge_(SEXP xSEXP, SEXP ySEXP, SEXP xvalSEXP, SEXP yvalSEXP, SEXP xvarSEXP, SEXP yvarSEXP, SEXP opSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<short>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::Mat<short>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type xval(xvalSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type yval(yvalSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type xvar(xvarSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type yvar(yvarSEXP);
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_(x, y, xval, yval, xvar, yvar, op));
    return rcpp_result_gen;
END_RCPP
}
// paste_cols
std::unordered_map<std::string, std::vector<int>> paste_cols(arma::Mat<short>& A);
RcppExport SEXP _sparr_paste_cols(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<short>& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(paste_cols(A));
    return rcpp_result_gen;
END_RCPP
}
// next_cell_
std::vector<int> next_cell_(std::vector<int>& cell, std::vector<int>& dim, std::vector<int>& fixed_indices);
RcppExport SEXP _sparr_next_cell_(SEXP cellSEXP, SEXP dimSEXP, SEXP fixed_indicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type cell(cellSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type fixed_indices(fixed_indicesSEXP);
    rcpp_result_gen = Rcpp::wrap(next_cell_(cell, dim, fixed_indices));
    return rcpp_result_gen;
END_RCPP
}
// set_intersect
vs set_intersect(vs v1, vs v2);
RcppExport SEXP _sparr_set_intersect(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vs >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< vs >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(set_intersect(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// set_diff
vs set_diff(vs v1, vs v2);
RcppExport SEXP _sparr_set_diff(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vs >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< vs >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(set_diff(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// set_issubeq
bool set_issubeq(vs& a, vs& b);
RcppExport SEXP _sparr_set_issubeq(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vs& >::type a(aSEXP);
    Rcpp::traits::input_parameter< vs& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(set_issubeq(a, b));
    return rcpp_result_gen;
END_RCPP
}
// set_in
bool set_in(std::string& a, vs& b);
RcppExport SEXP _sparr_set_in(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type a(aSEXP);
    Rcpp::traits::input_parameter< vs& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(set_in(a, b));
    return rcpp_result_gen;
END_RCPP
}
// set_int
bool set_int(int a, std::vector<int>& b);
RcppExport SEXP _sparr_set_int(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(set_int(a, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sparr_marginalize_", (DL_FUNC) &_sparr_marginalize_, 4},
    {"_sparr_merge_disjoint_", (DL_FUNC) &_sparr_merge_disjoint_, 6},
    {"_sparr_merge_", (DL_FUNC) &_sparr_merge_, 7},
    {"_sparr_paste_cols", (DL_FUNC) &_sparr_paste_cols, 1},
    {"_sparr_next_cell_", (DL_FUNC) &_sparr_next_cell_, 3},
    {"_sparr_set_intersect", (DL_FUNC) &_sparr_set_intersect, 2},
    {"_sparr_set_diff", (DL_FUNC) &_sparr_set_diff, 2},
    {"_sparr_set_issubeq", (DL_FUNC) &_sparr_set_issubeq, 2},
    {"_sparr_set_in", (DL_FUNC) &_sparr_set_in, 2},
    {"_sparr_set_int", (DL_FUNC) &_sparr_set_int, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_sparr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
