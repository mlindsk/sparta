// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "sparta_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// as_sparta_
Rcpp::List as_sparta_(const vec_dbl& arr, const vec_int& dim);
RcppExport SEXP _sparta_as_sparta_(SEXP arrSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const vec_dbl& >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< const vec_int& >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(as_sparta_(arr, dim));
    return rcpp_result_gen;
END_RCPP
}
// as_cpt_
Rcpp::List as_cpt_(arma::Mat<short>& x, vec_dbl& xval, vec_str& xvar, vec_str& y);
RcppExport SEXP _sparta_as_cpt_(SEXP xSEXP, SEXP xvalSEXP, SEXP xvarSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<short>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_dbl& >::type xval(xvalSEXP);
    Rcpp::traits::input_parameter< vec_str& >::type xvar(xvarSEXP);
    Rcpp::traits::input_parameter< vec_str& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(as_cpt_(x, xval, xvar, y));
    return rcpp_result_gen;
END_RCPP
}
// marginalize_sum_
Rcpp::List marginalize_sum_(arma::Mat<short>& x, vec_dbl& xval, vec_str xvar, vec_str y);
RcppExport SEXP _sparta_marginalize_sum_(SEXP xSEXP, SEXP xvalSEXP, SEXP xvarSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<short>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_dbl& >::type xval(xvalSEXP);
    Rcpp::traits::input_parameter< vec_str >::type xvar(xvarSEXP);
    Rcpp::traits::input_parameter< vec_str >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(marginalize_sum_(x, xval, xvar, y));
    return rcpp_result_gen;
END_RCPP
}
// marginalize_sum_2
Rcpp::List marginalize_sum_2(arma::Mat<short>& x, vec_dbl& xval, vec_str xvar, vec_str y);
RcppExport SEXP _sparta_marginalize_sum_2(SEXP xSEXP, SEXP xvalSEXP, SEXP xvarSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<short>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_dbl& >::type xval(xvalSEXP);
    Rcpp::traits::input_parameter< vec_str >::type xvar(xvarSEXP);
    Rcpp::traits::input_parameter< vec_str >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(marginalize_sum_2(x, xval, xvar, y));
    return rcpp_result_gen;
END_RCPP
}
// marginalize_max_
Rcpp::List marginalize_max_(arma::Mat<short>& x, vec_dbl& xval, vec_str xvar, vec_str y);
RcppExport SEXP _sparta_marginalize_max_(SEXP xSEXP, SEXP xvalSEXP, SEXP xvarSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<short>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_dbl& >::type xval(xvalSEXP);
    Rcpp::traits::input_parameter< vec_str >::type xvar(xvarSEXP);
    Rcpp::traits::input_parameter< vec_str >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(marginalize_max_(x, xval, xvar, y));
    return rcpp_result_gen;
END_RCPP
}
// merge_
Rcpp::List merge_(arma::Mat<short>& x, arma::Mat<short>& y, vec_dbl& xval, vec_dbl& yval, vec_str xvar, vec_str yvar, std::string op);
RcppExport SEXP _sparta_merge_(SEXP xSEXP, SEXP ySEXP, SEXP xvalSEXP, SEXP yvalSEXP, SEXP xvarSEXP, SEXP yvarSEXP, SEXP opSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<short>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::Mat<short>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< vec_dbl& >::type xval(xvalSEXP);
    Rcpp::traits::input_parameter< vec_dbl& >::type yval(yvalSEXP);
    Rcpp::traits::input_parameter< vec_str >::type xvar(xvarSEXP);
    Rcpp::traits::input_parameter< vec_str >::type yvar(yvarSEXP);
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_(x, y, xval, yval, xvar, yvar, op));
    return rcpp_result_gen;
END_RCPP
}
// merge_unity_
Rcpp::List merge_unity_(arma::Mat<short>& x, vec_dbl& xval, vec_str xvar, vec_str yvar, vec_int ydim, double rank, bool reciprocal);
RcppExport SEXP _sparta_merge_unity_(SEXP xSEXP, SEXP xvalSEXP, SEXP xvarSEXP, SEXP yvarSEXP, SEXP ydimSEXP, SEXP rankSEXP, SEXP reciprocalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<short>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_dbl& >::type xval(xvalSEXP);
    Rcpp::traits::input_parameter< vec_str >::type xvar(xvarSEXP);
    Rcpp::traits::input_parameter< vec_str >::type yvar(yvarSEXP);
    Rcpp::traits::input_parameter< vec_int >::type ydim(ydimSEXP);
    Rcpp::traits::input_parameter< double >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< bool >::type reciprocal(reciprocalSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_unity_(x, xval, xvar, yvar, ydim, rank, reciprocal));
    return rcpp_result_gen;
END_RCPP
}
// slice_
Rcpp::List slice_(arma::Mat<short>& x, vec_dbl& xval, Rcpp::List dim_names, vec_str slice_names, vec_str slice_cell);
RcppExport SEXP _sparta_slice_(SEXP xSEXP, SEXP xvalSEXP, SEXP dim_namesSEXP, SEXP slice_namesSEXP, SEXP slice_cellSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<short>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< vec_dbl& >::type xval(xvalSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type dim_names(dim_namesSEXP);
    Rcpp::traits::input_parameter< vec_str >::type slice_names(slice_namesSEXP);
    Rcpp::traits::input_parameter< vec_str >::type slice_cell(slice_cellSEXP);
    rcpp_result_gen = Rcpp::wrap(slice_(x, xval, dim_names, slice_names, slice_cell));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sparta_as_sparta_", (DL_FUNC) &_sparta_as_sparta_, 2},
    {"_sparta_as_cpt_", (DL_FUNC) &_sparta_as_cpt_, 4},
    {"_sparta_marginalize_sum_", (DL_FUNC) &_sparta_marginalize_sum_, 4},
    {"_sparta_marginalize_sum_2", (DL_FUNC) &_sparta_marginalize_sum_2, 4},
    {"_sparta_marginalize_max_", (DL_FUNC) &_sparta_marginalize_max_, 4},
    {"_sparta_merge_", (DL_FUNC) &_sparta_merge_, 7},
    {"_sparta_merge_unity_", (DL_FUNC) &_sparta_merge_unity_, 7},
    {"_sparta_slice_", (DL_FUNC) &_sparta_slice_, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_sparta(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
